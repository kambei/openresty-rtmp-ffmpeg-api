worker_processes  auto;

error_log  /var/log/error.log  debug;
error_log  /var/log/error.log  notice;
error_log  /var/log/error.log  info;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # See http://licson.net/post/optimizing-nginx-for-large-file-delivery/ for more detail
    # This optimizes the server for HLS fragment delivery
    sendfile off;
    tcp_nopush on;
    aio on;
    directio 512;
    
    lua_package_path '/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/resty/?.lua;;';
    # lua_package_path '~/lua/?.lua;;';
    resolver 8.8.8.8;
    # cache for discovery metadata documents
    lua_shared_dict discovery 1m;
    # cache for JWKs
    lua_shared_dict jwks 1m;

    server {
        listen 80;
        server_name localhost;

        set $session_name nginx_session;
        add_header Content-Security-Policy upgrade-insecure-requests;

        location / {
            
            root /usr/local/nginx/html/;
            index index.html;
        }

        # path to video player
        location /protected {
            
            access_by_lua '
                local opts = {
                redirect_uri= "http://localhost/",
                accept_none_alg = true,
                ssl_verify = "no",
                scope = "openid",
                discovery = "http://keycloak.test/realms/openresty/.well-known/openid-configuration",
                client_id = "nginx",
                client_secret = "Md5KXGI0wWtJEh8dG7u6Ky5QUBBHUNbh",
                redirect_uri_scheme = "http",
                logout_path = "/logout",
                redirect_after_logout_uri = "http://keycloak.test/realms/openresty/protocol/openid-connect/logout?redirect_uri=http://localhost",
                redirect_after_logout_with_id_token_hint = false,
                session_contents = {id_token=true}
                }
                -- call introspect for OAuth 2.0 Bearer Access Token validation
                local res, err = require("resty.openidc.openidc").authenticate(opts)
                if err then
                ngx.status = 403
                ngx.say(err)
                ngx.exit(ngx.HTTP_FORBIDDEN)
                end
            ';

            root /usr/local/nginx/html/;
            index protected.html;
        }

        location /hls {

            # Serve HLS fragments
            types {
                application/vnd.apple.mpegurl m3u8;
            }

            root /tmp;
            
            add_header Cache-Control no-cache; # Prevent caching of HLS fragments
            add_header Access-Control-Allow-Origin * always; # Allow web player to access our playlist
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
    }
}

    
rtmp {
    server {
        listen 1935; # Listen on standard RTMP port
        chunk_size 4000;

        # This application is to accept incoming stream
        application live {
            live on; # Allows live input

            # pass on_publish request to our go api to check provided stream key
            on_publish http://localhost:3000/on_publish;

            # Once receive stream, transcode for adaptive streaming
            # This single ffmpeg command takes the input and transforms
            # the source into 4 different streams with different bitrate
            # and quality. P.S. The scaling done here respects the aspect
            # ratio of the input.
            exec ffmpeg -i rtmp://localhost/$app/$name -async 1 -vsync -1
                        -c:v libx264 -c:a libfdk_aac -b:v 256k -b:a 32k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 2  -crf 23 -f flv rtmp://localhost/hls/$name_low
                        -c:v libx264 -c:a libfdk_aac -b:v 768k -b:a 96k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 2 -crf 23 -f flv rtmp://localhost/hls/$name_mid
                        -c:v libx264 -c:a libfdk_aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 2  -crf 23 -f flv rtmp://localhost/hls/$name_high
                        -c:v libx264 -c:a libfdk_aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset veryfast -g 2  -crf 23 -f flv rtmp://localhost/hls/$name_hd720
                        -c copy -tune zerolatency -g 2 -f flv rtmp://localhost/hls/$name_src;
        }
        application hls {
            live on; # Allows live input from above
            hls on; # Enable HTTP Live Streaming
            
            # Pointing this to an SSD is better as this involves lots of IO        
            hls_path /tmp/hls;

            hls_fragment 2s;
            hls_cleanup off; # see clean-hls-dir.sh for more information;
            hls_playlist_length 6s;
            
            # allow publish only from localhost
            allow publish 127.0.0.1;
            deny publish all;
            
            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
            hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
            hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
            hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
            hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
        }
    }
}
